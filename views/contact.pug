

In this project you will create an editable contact list, including logins. Most importantly you will be using all of the new techniques we've been learning recently - a database (sqlite), pug, express, authentication and authorization, and effective middleware. Functionality This application is

pasted

Edit
This is a comprehensive web development project that involves building a contact management system with user authentication. Let me break down the key requirements and create a complete implementation for you.


Contact List Application - Complete Implementation
Code 
Now let me create the Pug templates for the views:


Pug Templates for Contact List App
Code 
I've created a complete implementation of the contact list application according to your project requirements. Here's what I've included:

Key Features Implemented:
Database Schema: Two tables (contacts and users) with all required fields
Authentication: User registration, login, and bcrypt password hashing
CRUD Operations: Full create, read, update, delete functionality for contacts
Express Routes: All required routes with proper parameter handling
Pug Templates: Complete UI with forms and data display
Middleware: Database injection, session management, and authentication guards
Project Structure:
project/
├── package.json
├── app.js (main application file)
├── ContactDB.js (database wrapper class)
├── routes/
│   ├── contacts.js
│   └── auth.js
└── views/
    ├── layout.pug
    ├── index.pug
    ├── contact.pug
    ├── create.pug
    ├── edit.pug
    ├── delete.pug
    ├── login.pug
    └── signup.pug
Key Implementation Details:
Database: Uses SQLite with the dbcmps369 module as required
Password Security: Implements bcrypt with salt for secure password storage
Default User: Automatically creates cmps369/rcnj user on initialization
Checkbox Handling: Properly handles form checkboxes as described in the requirements
Session Management: Uses express-session for user authentication
Routing: Uses proper RESTful routes with parameter extraction
Styling: Includes water.css for basic styling
To Run the Application:
Create the project directory and save the files
Run npm install to install dependencies
Run npm start or node app.js to start the server
Visit http://localhost:3000 to access the application
The application follows all the specified requirements including the "peculiar" aspects where anyone can view all contacts and registered users can edit any contact information. The default user account (cmps369/rcnj) is automatically created on first run.




make separate artifacts for each file

Edit
I'll create separate artifacts for each file in the project structure.


package.json
Code 

app.js
Code 

ContactDB.js
Code 

routes/contacts.js
Code 

routes/auth.js
Code 

views/layout.pug
Code 

views/index.pug
Code 

views/contact.pug
Code 

views/create.pug
Code 

views/edit.pug
Code 

views/delete.pug
Code 

views/login.pug
Code 

views/signup.pug
Code 
Perfect! I've now created separate artifacts for each file in your contact list application. Here's the complete file structure:

Project Structure:
contact-list-app/
├── package.json
├── app.js
├── ContactDB.js
├── routes/
│   ├── contacts.js
│   └── auth.js
└── views/
    ├── layout.pug
    ├── index.pug
    ├── contact.pug
    ├── create.pug
    ├── edit.pug
    ├── delete.pug
    ├── login.pug
    └── signup.pug
Setup Instructions:
Create the project directory:
bash
mkdir contact-list-app
cd contact-list-app
Create the subdirectories:
bash
mkdir routes
mkdir views
Copy each artifact into its respective file (make sure to create the exact file names as shown in the artifact titles)
Install dependencies:
bash
npm install
Run the application:
bash
npm start
Key Features:
Authentication: Login/signup with bcrypt password hashing
Database: SQLite with automatic table creation and default user
CRUD Operations: Full contact management functionality
Session Management: User sessions with authentication middleware
Responsive UI: Uses water.css for clean styling
Form Validation: Server-side validation for user registration and contact data
The application will be available at http://localhost:3000 and automatically creates the required cmps369/rcnj user account on first run.




I tried to run this on a render.com web service instance and got the following error when deploying:
AssertionError [ERR_ASSERTION]: DBPATH not specified in environment.

Edit
The error indicates that the dbcmps369 module expects a DBPATH environment variable to be set. Let me fix the ContactDB.js file to handle this properly for deployment on Render.com.


ContactDB.js
Code ∙ Version 2 
Now I need to update the app.js file to set the environment variable if it's not already set:


app.js
Code ∙ Version 2 
The fixes I've made should resolve the deployment issue:

Changes Made:
Updated ContactDB.js:
Added proper path handling using the path module
Made the database path configurable via the DBPATH environment variable
Falls back to a local file path if the environment variable isn't set
Updated app.js:
Added automatic setting of the DBPATH environment variable if it's not already set
This ensures compatibility with both local development and cloud deployment
For Render.com Deployment:
You have two options:

Option 1: Let the app set the path automatically (Recommended)
The updated code will automatically handle the database path, so you shouldn't need to set any environment variables manually.

Option 2: Set the DBPATH environment variable manually
If you prefer to explicitly set the database path on Render.com:

Go to your service settings on Render.com
Navigate to the "Environment" section
Add a new environment variable:
Key: DBPATH
Value: /tmp/contacts.db (or another writable path)
Additional Render.com Considerations:
Note that Render.com's file system is ephemeral, meaning your SQLite database will be reset each time your service restarts. For a production application, you'd typically want to use a persistent database service like PostgreSQL. However, for this educational project, the current setup should work fine for demonstration purposes.

Try redeploying with these changes, and the DBPATH error should be resolved!




TypeError: this.db.query is not a function

Edit
The error indicates that the dbcmps369 module doesn't have a query method. Let me check the correct API for this module and update the ContactDB.js file accordingly.


dbcmps369 npm module API documentation
10 results





















Let me search more specifically for the dbcmps369 module:


"dbcmps369" module github
0 results

Since I can't find specific documentation for the dbcmps369 module, let me check what methods are typically available on database wrapper classes and create a more standard implementation. Based on the error, it seems the module might use a different API. Let me update the ContactDB.js file to use the correct API:


ContactDB.js
Code ∙ Version 3 
I've updated the ContactDB.js file to use the more standard SQLite methods that are commonly used in database wrapper modules:

Changes Made:
Replaced this.db.query() with standard SQLite methods:
this.db.exec() - for CREATE TABLE statements
this.db.all() - for SELECT queries that return multiple rows
this.db.get() - for SELECT queries that return a single row
this.db.run() - for INSERT, UPDATE, DELETE statements
Updated return value handling:
Changed result.lastInsertRowid to result.lastID (more standard)
These are the typical methods available in most SQLite wrapper libraries. If the dbcmps369 module still doesn't work with these methods, you might need to:

Alternative Solutions:
Option 1: Check the actual dbcmps369 API
Try logging the available methods:

javascript
console.log('Available methods:', Object.getOwnPropertyNames(this.db));
console.log('DB instance:', this.db);
Option 2: Use the built-in sqlite3 module instead
If dbcmps369 continues to cause issues, update your package.json to use sqlite3 instead:

json
"dependencies": {
  "express": "^4.18.2",
  "pug": "^3.0.2",
  "bcryptjs": "^2.4.3",
  "express-session": "^1.17.3",
  "sqlite3": "^5.1.6"
}
And update the constructor in ContactDB.js:

javascript
const sqlite3 = require('sqlite3').verbose();

constructor() {
  const dbPath = process.env.DBPATH || path.join(__dirname, 'contacts.db');
  this.db = new sqlite3.Database(dbPath);
}
Try the updated version first, and let me know if you still encounter issues!




The only available  dbcmps369 api method is path. show me the updates to implement option 2

Edit
I'll show you how to update the code to use the standard sqlite3 module instead of dbcmps369. Here are the necessary changes:


package.json
Code ∙ Version 2 

ContactDB.js
Code ∙ Version 4 

app.js
Code ∙ Version 3 
Summary of Changes for Option 2:
1. Updated package.json
Replaced dbcmps369 with sqlite3 module
The sqlite3 module is the standard, well-maintained SQLite driver for Node.js
2. Completely rewrote ContactDB.js
Import change: Using sqlite3 instead of dbcmps369
Database initialization: Using standard sqlite3.Database() constructor
Async/await support: Added promisified versions of database methods using Node.js util.promisify
Method changes: Using standard SQLite3 methods:
runAsync() for INSERT, UPDATE, DELETE
getAsync() for single row SELECT
allAsync() for multiple row SELECT
execAsync() for DDL statements like CREATE TABLE
Added close method: For proper database cleanup
3. Simplified app.js
Removed the DBPATH environment variable setup since we're now handling the path directly in the ContactDB constructor
Installation Steps:
Update your dependencies:
bash
npm uninstall dbcmps369
npm install sqlite3
The updated code will now work with the standard sqlite3 module
Key Benefits of Using sqlite3:
Well-documented: Extensive documentation and community support
Stable: Mature, battle-tested module
Standard: Industry standard SQLite driver for Node.js
Better error handling: More descriptive error messages
Performance: Optimized for production use
The application should now work properly on both local development and Render.com deployment!




TypeError: Cannot read properties of undefined (reading 'lastID')

Edit
The issue is that sqlite3 doesn't return a result object with lastID from run(). Instead, the lastID is available on the this context within the callback. Let me fix the ContactDB.js file:


ContactDB.js
Code ∙ Version 5 

ContactDB.js
Code ∙ Version 6 

ContactDB.js
Code ∙ Version 7 
Key Fix Explained:
The issue was with how sqlite3 handles the run() method. Unlike some other database libraries, sqlite3 doesn't return a result object directly. Instead, it provides lastID and changes properties on the this context within the callback function.

What I Fixed:
Custom promisified methods: Instead of using Node's util.promisify, I created custom promisified methods that properly handle the sqlite3 callback pattern.
Proper this context handling: In the runAsync method, I used a regular function() instead of an arrow function to preserve the this context that contains lastID and changes.
Return structure: The runAsync method now returns an object with lastID and changes properties, matching what the rest of the code expects.
How it works now:
javascript
// Before (causing error)
const result = await this.db.runAsync(...);
// result was undefined, so result.lastID failed

// After (working)
const result = await this.runAsync(...);
// result is { lastID: 123, changes: 1 }
// result.lastID works correctly
The application should now work properly with the sqlite3 module. The lastID will be correctly returned when creating new contacts and users, and all database operations should function as expected.




When i click login or signup it just says contact not found

Edit
The issue is that the login and signup routes are conflicting with the contact routes. The contact routes use /:id which is catching /login and /signup as if they were contact IDs. We need to reorder the routes so that the specific routes (/login, /signup) are registered before the dynamic route (/:id).


app.js
Code ∙ Version 4 
The problem was that Express routes are matched in the order they are registered. Since contact routes were registered first, the /:id route was matching /login and /signup before the auth routes had a chance to handle them.

What was happening:
User clicks "Login" → goes to /login
Contact routes are checked first
/:id route matches with id = "login"
Code tries to find a contact with ID "login"
No contact found → "Contact not found" error
The fix:
By registering auth routes before contact routes, Express will check for /login and /signup routes first, and only fall back to the /:id contact route if no specific route matches.

Route matching order now:
/login → handled by auth routes
/signup → handled by auth routes
/create → handled by contact routes
/:id → handled by contact routes (only for actual numeric IDs)
This is a common Express.js gotcha - always register specific routes before dynamic/parameterized routes!




when i try to edit an existing contact it instead adds a new contact

Edit
The issue is that the edit form is posting to /create instead of /:id/edit. Looking at the edit template, I need to fix the form action. Let me update the edit.pug template:


views/edit.pug
Code ∙ Version 2 
Actually, looking at the template, the form action looks correct. Let me check if there might be an issue with how the contact ID is being passed or if there's a route ordering problem. Let me also verify the contact routes are set up correctly:


routes/contacts.js
Code ∙ Version 2 
The problem was route ordering again! In Express, routes are matched in the order they're defined. The issue was:

router.get('/:id', ...) was defined before router.get('/:id/edit', ...)
When you tried to access /123/edit, Express matched it to /:id with id = "123/edit"
This caused the contact view to be shown instead of the edit form
What I fixed:
Reordered all the routes so that more specific routes come before more general ones:

Static routes first: / and /create
Specific parameterized routes: /:id/edit, /:id/delete
General parameterized route last: /:id
Critical Express.js Rule:
Always define routes from most specific to least specific. Routes with additional path segments (like /:id/edit) must come before catch-all routes (like /:id).

Before (broken):

/:id          ← This would catch "/123/edit"
/:id/edit     ← Never reached!
After (working):

/:id/edit     ← Catches "/123/edit" correctly
/:id          ← Only catches "/123" (no additional path)
Now when you click "Edit Contact", it should properly show the edit form instead of creating a new contact!




It didnt work. Nothing changed

Edit
Let me debug this step by step. The issue might be that the form is still somehow posting to /create. Let me check the edit template more carefully and add some debugging:


views/edit.pug
Code ∙ Version 3 
Now let me also add some debugging to the server routes to see what's actually happening:


routes/contacts.js
Code ∙ Version 3 
Now try the following:

Restart your server to make sure the route changes take effect
Go to edit a contact and look at the page - you should see debug information showing the contact ID and the form action URL
Submit the edit form and check your server console logs to see which route is being hit (CREATE or EDIT)
This will help us determine if:

The form is posting to the wrong URL
The route isn't being matched correctly
Something else is happening
Can you try this and let me know what the debug output shows?




This project builds on our last, with the only change being you will add more effective styling (responsive) using two options:
1. Your own CSS
2. Bootstrap 4 or 5
You can use a mix of both, if you want too. However, I want you to limit your project to only including Bootstrap 4 or 5, if you are using a CSS framework.
Step 1
Create a copy of Project 2, and remove the link to water.css you placed in your layout.pug or elsewhere.

// Remove this!
link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/water.css@2/out/light.css")
Step 2
Start adding your CSS!
I am intentionally not providing specific guidelines. I want you to be creative. However, some tips for earning points:
1. Your site should look professional. Adding unusual fonts and colors isn't the goal here.
2. Your site should have a consistent look. Margins, font sizes, and colors should be consistent. Buttons to take actions should have reasonable colors.
3. Your site should be responsive. Below I have screenshots at full screen and small - strive for this. Resize your window, or use the developer tools in your browser to simulate a mobile device!
For the table, if you are using Bootstrap, check out table-responsive. Another excellent way to create tabular-like list display, while continuing to have a responsive design is to use list items instead of tables. Take a look at my screenshots below - I used a list-item-group in Bootstrap.
Make sure you review the responsive web design slides and tutorials on Canvas, along with Flexbox (especially if you aren't using Bootstrap!).

Edit
I'll help you create a responsive, professional-looking version of your contact list application. Let me update the project to use Bootstrap 5 for a clean, modern design.


views/layout.pug
Code ∙ Version 2 

views/index.pug
Code ∙ Version 2 

views/contact.pug
Code ∙ Version 2 

views/create.pug
Code ∙ Version 2 

views/edit.pug
Code ∙ Version 4 

views/delete.pug
Code ∙ Version 2 







extends layout

block content
  .row.justify-content-center
    .col-12.col-lg-8
      .card.contact-detail-card
        .card-header.bg-primary.text-white
          .d-flex.justify-content-between.align-items-center
            h2.mb-0
              i.bi.bi-person-circle.me-2
              | #{contact.first_name} #{contact.last_name}
            if user
              .btn-group
                a.btn.btn-light.btn-sm(href=`/${contact.id}/edit`)
                  i.bi.bi-pencil.me-1
                  | Edit
                a.btn.btn-outline-light.btn-sm(href=`/${contact.id}/delete`)
                  i.bi.bi-trash.me-1
                  | Delete
        
        .card-body.p-4
          .row.g-4
            if contact.email_address || contact.phone_number
              .col-12.col-md-6
                h5.text-primary
                  i.bi.bi-telephone-fill.me-2
                  | Contact Information
                if contact.email_address
                  .mb-3
                    label.form-label.fw-bold Email Address
                    .d-flex.align-items-center
                      i.bi.bi-envelope.text-muted.me-2
                      a.text-decoration-none(href=`mailto:${contact.email_address}`) #{contact.email_address}
                
                if contact.phone_number
                  .mb-3
                    label.form-label.fw-bold Phone Number
                    .d-flex.align-items-center
                      i.bi.bi-telephone.text-muted.me-2
                      a.text-decoration-none(href=`tel:${contact.phone_number}`) #{contact.phone_number}
            
            if contact.street || contact.city || contact.state || contact.zip || contact.country
              .col-12.col-md-6
                h5.text-primary
                  i.bi.bi-geo-alt-fill.me-2
                  | Address
                .mb-3
                  label.form-label.fw-bold Mailing Address
                  .text-muted
                    if contact.street
                      div #{contact.street}
                    if contact.city || contact.state || contact.zip
                      div
                        if contact.city
                          | #{contact.city}
                        if contact.state
                          | #{contact.city ? ', ' : ''}#{contact.state}
                        if contact.zip
                          |  #{contact.zip}
                    if contact.country
                      div #{contact.country}
            
            .col-12
              h5.text-primary
                i.bi.bi-chat-dots-fill.me-2
                | Contact Preferences
              .row.g-3
                .col-6.col-md-3
                  .text-center.p-3.border.rounded(class=contact.contact_by_email ? 'bg-success-subtle border-success' : 'bg-light border-secondary')
                    i.bi(class=contact.contact_by_email ? 'bi-envelope-check text-success' : 'bi-envelope-x text-muted', style='font-size: 2rem;')
                    .mt-2
                      .fw-bold Email
                      small.text-muted= contact.contact_by_email ? 'Preferred' : 'Not preferred'
                
                .col-6.col-md-3
                  .text-center.p-3.border.rounded(class=contact.contact_by_phone ? 'bg-info-subtle border-info' : 'bg-light border-secondary')
                    i.bi(class=contact.contact_by_phone ? 'bi-telephone-check text-info' : 'bi-telephone-x text-muted', style='font-size: 2rem;')
                    .mt-2
                      .fw-bold Phone
                      small.text-muted= contact.contact_by_phone ? 'Preferred' : 'Not preferred'
        
        .card-footer.bg-light
          .d-flex.justify-content-between.align-items-center
            a.btn.btn-outline-primary(href='/')
              i.bi.bi-arrow-left.me-2
              | Back to Directory
            if user
              .btn-group
                a.btn.btn-primary(href=`/${contact.id}/edit`)
                  i.bi.bi-pencil.me-1
                  | Edit Contact
                a.btn.btn-outline-danger(href=`/${contact.id}/delete`)
                  i.bi.bi-trash.me-1
                  | Delete
